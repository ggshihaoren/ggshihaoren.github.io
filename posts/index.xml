<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on GG&#39;s blog</title>
    <link>https://ggshihaoren.github.io/posts/</link>
    <description>Recent content in Posts on GG&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Jul 2022 17:09:58 +0800</lastBuildDate><atom:link href="https://ggshihaoren.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>莫比乌斯反演</title>
      <link>https://ggshihaoren.github.io/posts/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</link>
      <pubDate>Thu, 21 Jul 2022 17:09:58 +0800</pubDate>
      
      <guid>https://ggshihaoren.github.io/posts/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</guid>
      <description>用途 抱着好奇的态度学习了这个数论板块中较为重要的内容。简单来说对于一些较难直接求出值的函数 $f(n)$ ,如若可以求出它的倍数的和或者约数的和 $g(n)$ ,那么我们就可以直接通过莫比乌斯反演进行运算从而求得 $f(n)$ 的值。
前置芝士 在学习这一部分之前，首先需要学习数论分块与狄利克雷卷积的相关知识。
一、数论分块 对于形如$\sum_{i=1}^nf(i)g(\lfloor \frac{n}{i} \rfloor)$的和式，如果我们可以做到O(1)内计算$f(r)-f(l)$时，利用数论分块就能以$O(\sqrt N)$的复杂度算出上述的式子。
结论 对于对于常数$1\le l \le r \le n$，要使得$\lfloor \frac{n}{l} \rfloor = \lfloor \frac{n}{r} \rfloor,r_{max}=\lfloor \frac{n}{\lfloor \frac{n}{l} \rfloor} \rfloor$
证明 设$k=\lfloor \frac{n}{l} \rfloor$，那么 $$k \le \frac{n}{l} \Rightarrow \lfloor \frac{n}{k} \rfloor\geq\lfloor \frac{n}{\frac{n}{l}} \rfloor=\lfloor l \rfloor=l,则r _{max}=l _{max}=\lfloor \frac{n}{\lfloor \frac{n}{l} \rfloor} \rfloor$$
证毕
由于$\lfloor \frac{n}{l} \rfloor$的值形成了块状分布，因此要求上面的和式的话，我们可以将一整个1~N的区间划分成多个l~r的连续区间，同样的值聚集在同一个块中，这样的话就可以直接计算某一块中的大小的和，从而大大降低时间复杂度。下面以计算$\sum_{i=1}^n\lfloor \frac{n}{i} \rfloor$为例实现代码。
int l=1,r; int sum=0; while(l&amp;lt;=n){ r=(n/(n/l)); //由结论可得的r的右端点 sum+=(r-l+1)*(n/l); //一整块的值 l=r+1; } return sum; 二、狄利克雷卷积 所谓狄利克雷卷积，也称卷积，是定义在数论函数间的一种二元运算，可被定义为： $$ (f*g)(n):=\sum _{xy=n}f(x)g(y) $$</description>
    </item>
    
    <item>
      <title>初学 SpringBoot</title>
      <link>https://ggshihaoren.github.io/posts/%E5%88%9D%E5%AD%A6springboot/</link>
      <pubDate>Thu, 05 May 2022 14:51:48 +0800</pubDate>
      
      <guid>https://ggshihaoren.github.io/posts/%E5%88%9D%E5%AD%A6springboot/</guid>
      <description>从后端零基础开始 由于本学期 J2EE 课程作业需要，我们小组需要前后端分离去学习不同的东西。前端关于 HTML,CSS,JSP 的内容已经有些许了解了，但是后端部分的知识却是一点都不知道。出于想学习新东西的心态，我便选择开始学习后端部分的知识。
可能是觉得老师教的东西有些许过时了，我们的组长便决定不完全按照老师所教的东西来，而是选择了 SpringBoot 和 MyBatis 作为我们的后端选型，数据库也不是 MYSQL，而是 MariaDB （我们组长到底是怎么知道这么多东西的真的好厉害必须狠狠夸一波）。
于是便有了后面一些关于 SpringBoot 的简单学习。
SpringBoot 是什么？ 要弄懂 SpringBoot 是什么或许得先了解 Spring 应用开发的相关知识。简单来说，它是一种为了解决企业应用程序开发复杂性而创建的开源的框架。框架的主要优势之一就是其分层架构，分层架构允许我们使用哪一种组件，同时为 J2EE 应用程序开发提供了集成的框架。
而 SpringBoot 呢？它也是一种框架。它被设计出来的目的便是为了简化 Spring 应用的创建，运行，调试，部署等功能。它打包了许多本来需要我们自己去配置的功能，按照人们的使用习惯解决了依赖问题，这样便可以降低开发人员对于框架的关注点，可以把更多的精力放在自己的业务代码上。总的来说，其目的就是为了 Java Web 的开发进行&amp;quot;简化&amp;quot;和&amp;quot;加快速度&amp;quot;，简化开发过程中引入或启动相关 Spring 功能的配置。使用 SpringBoot 我们就可以不用或者只需很少的 Spring 配置就可以让企业项快速运行起来。
简单尝试 打开 IDEA，Generator 选择的是 Spring Initializr，取名默认为 demo，再选择了 Gradle 作为此次的项目结构便开始了我的第一次尝试（网上大部分的教程好像都是使用了 MAVEN，但是据说是使用 Gradle 的人越来越多了，便试着使用了它）。这里要注意在第二步中需要勾选 Spring Web 才能顺利进行这个框架的构建~
之后便是愉快的贴代码环节了。通过 src/main/java/com/example/demo 路径打开已生成的 DemoApplication.java 文件，并将下面这段代码直接贴上去：
package com.example.demo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestParam; import org.</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://ggshihaoren.github.io/posts/helloworld/</link>
      <pubDate>Thu, 28 Apr 2022 20:02:25 +0800</pubDate>
      
      <guid>https://ggshihaoren.github.io/posts/helloworld/</guid>
      <description>Welcome To My First Page 作为自己的第一篇博客，纵有千言万语想要表述，但是却受限于自己的语言功底而半天敲不出什么话&amp;hellip;
那就如同最开始接触代码一样，从 Hello World开始吧！
以后会经常更新一些新学的有趣的知识，感兴趣的小伙伴可以一起互相学习^-^</description>
    </item>
    
  </channel>
</rss>
